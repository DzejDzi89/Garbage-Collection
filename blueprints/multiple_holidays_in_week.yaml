blueprint:
  name: Multiple holidays in week
  description: >-
    This automation is triggered from the `garbage_collection` integration by event `garbage_collection_loaded`,
    during the device state update. 

    It PROCESSES DATA SENT WITH THE EVENT, and then FINISHES THE UPDATE.
    DO NOT CALL THIS SERVICE MANUALLY, IT WON'T WORK (it won't have the data).

    Also, make sure the INTEGRATION IS CONFIGURED FOR `manual_update`
    (that will disable the state update by the integration and pass it to this automation).


    It loops through the calculated dates and checks for a public holiday the week, before/on the calculated collection date.
    If found, it will move the event by one day for each found public holiday.


    The sensors are normally updated once a day, or when Home Assistant starts.
    The update can be triggered by updating the integration configuration (just hit configure and submit).
  domain: automation
  source_url: https://github.com/bruxy70/Garbage-Collection/blob/master/blueprints/multiple_holidays_in_week.yaml
  input:
    garbage_collection_entity:
      name: Garbage Collection Entity
      description: Triggered by the event for this entity.
      selector:
        entity:
          integration: garbage_collection
    holiday_entity:
      name: Holidays
      description: Entity containing the holidays - an instance of Holidays custom integration (available through HACS)
      selector:
        entity:
          integration: holidays
mode: parallel
trigger:
  - platform: event
    event_type: garbage_collection_loaded
    event_data:
      entity_id: !input garbage_collection_entity
action:
  - variables:
      holiday_entity: !input holiday_entity
  - repeat:
      count: "{{ trigger.event.data.collection_dates | count }}"
      sequence:
        - condition: template
          value_template: >-
            {%- set collection_date = as_datetime(trigger.event.data.collection_dates[repeat.index-1]) %}
            {%- set ns = namespace(found=false) %}
            {%- for i in range(collection_date.weekday()+1) %}
              {%- set d = ( collection_date + timedelta( days=-i) ) | as_timestamp | timestamp_custom("%Y-%m-%d") %}
              {%- if d in state_attr(holiday_entity,'holidays') %}
                {%- set ns.found = true %}
              {%- endif %}
            {%- endfor %}  
            {{ ns.found }}
        - service: garbage_collection.offset_date
          data:
            entity_id: "{{ trigger.event.data.entity_id }}"
            date: "{{ trigger.event.data.collection_dates[repeat.index-1] }}"
            offset: >-
              {%- set collection_date = as_datetime(trigger.event.data.collection_dates[repeat.index-1]) %}
              {%- set ns = namespace(found_free=false, offset=0) %}
              {%- for i in range(collection_date.weekday()+1) %}
                {%- set d = ( collection_date + timedelta( days=-i) ) | as_timestamp | timestamp_custom("%Y-%m-%d") %}
                {%- if d in state_attr(holiday_entity,'holidays') %}
                  {%- set ns.offset = ns.offset + 1 %}
                {%- endif %}
              {%- endfor %}  
              {%- for _ in range(7) if not ns.found_free %}
                {%- set d = ( collection_date + timedelta( days=ns.offset) ) | as_timestamp | timestamp_custom("%Y-%m-%d") %}
                {%- if d in state_attr(holiday_entity,'holidays') %}
                  {%- set ns.offset = ns.offset + 1 %}
                {% else %}
                  {%- set ns.found_free = true %}
                {%- endif %}
              {% endfor %}
              {{ ns.offset }}
  - service: garbage_collection.update_state
    data:
      entity_id: "{{ trigger.event.data.entity_id }}"
